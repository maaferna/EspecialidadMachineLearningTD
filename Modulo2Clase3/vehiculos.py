import json

class Vehiculo:
    """
    Clase base que representa un veh√≠culo gen√©rico.

    Esta clase define atributos comunes para cualquier tipo de veh√≠culo y 
    m√©todos b√°sicos que pueden ser sobrescritos por clases hijas.

    Atributos:
        __marca (str): Marca del veh√≠culo.
        __modelo (str): Modelo del veh√≠culo.
        __a√±o (int): A√±o de fabricaci√≥n del veh√≠culo.
    """

    def __init__(self, marca, modelo, a√±o):
        """
        Inicializa un objeto Vehiculo con los atributos b√°sicos.

        Args:
            marca (str): Marca del veh√≠culo (por ejemplo, 'Toyota').
            modelo (str): Modelo del veh√≠culo (por ejemplo, 'Corolla').
            a√±o (int): A√±o de fabricaci√≥n del veh√≠culo (por ejemplo, 2020).
        """
        self.__marca = marca
        self.__modelo = modelo
        self.__a√±o = a√±o

    def acelerar(self):
        """Imprime un mensaje gen√©rico indicando que el veh√≠culo est√° acelerando."""
        print("El veh√≠culo est√° acelerando de forma gen√©rica.")

    def obtener_info(self):
        """
        Devuelve una cadena con la informaci√≥n b√°sica del veh√≠culo.

        Returns:
            str: Informaci√≥n formateada, por ejemplo: 'Toyota Corolla (2020)'.
        """
        return f"{self.__marca} {self.__modelo} ({self.__a√±o})"
    
    def to_dict(self):
        """
        Devuelve los atributos del veh√≠culo en formato diccionario.

        Returns:
            dict: Informaci√≥n del veh√≠culo como diccionario.
        """
        return {
            "marca": self.__marca,
            "modelo": self.__modelo,
            "a√±o": self.__a√±o
        }


class Auto(Vehiculo):
    """
    Clase derivada que representa un autom√≥vil.
    """

    def acelerar(self):
        """Mensaje espec√≠fico para aceleraci√≥n de autos."""
        print("üöó El auto acelera suavemente en carretera.")

    def abrir_maletero(self):
        """Simula abrir el maletero del auto."""
        print("El maletero del auto ha sido abierto.")


class Moto(Vehiculo):
    """
    Clase derivada que representa una motocicleta.
    """

    def acelerar(self):
        """Mensaje espec√≠fico para aceleraci√≥n de motocicletas."""
        print("üèçÔ∏è La moto acelera r√°pidamente en la autopista.")

    def hacer_caballito(self):
        """Simula realizar un caballito con la moto."""
        print("La moto est√° haciendo un caballito. ¬°Cuidado!")


class VehiculoPrinter:
    """
    Clase dedicada a mostrar informaci√≥n de veh√≠culos por consola.
    (Responsabilidad √∫nica: visualizaci√≥n humana).
    """

    @staticmethod
    def mostrar_info(vehiculo):
        print(f"üìã Informaci√≥n del veh√≠culo: {vehiculo.obtener_info()}")


class VehiculoJSONPrinter:
    """
    Clase dedicada a exportar informaci√≥n de veh√≠culos en formato JSON.
    (Responsabilidad √∫nica: persistencia o interoperabilidad).
    """

    @staticmethod
    def exportar_a_json(vehiculo):
        """
        Convierte los datos del veh√≠culo a una cadena JSON.

        Args:
            vehiculo (Vehiculo): Objeto del que se desea obtener informaci√≥n.

        Returns:
            str: Cadena JSON.
        """
        return json.dumps(vehiculo.to_dict(), indent=4, ensure_ascii=False)

    @staticmethod
    def guardar_en_archivo(vehiculo, ruta):
        """
        Guarda los datos del veh√≠culo como archivo JSON.

        Args:
            vehiculo (Vehiculo): Objeto a guardar.
            ruta (str): Ruta del archivo de destino.
        """
        with open(ruta, 'w', encoding='utf-8') as f:
            json.dump(vehiculo.to_dict(), f, indent=4, ensure_ascii=False)

